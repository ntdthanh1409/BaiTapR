{
flag=1
heap_ind=c(left_i,right_i)[min_ind]
tmp=heap[heap_ind]
heap[heap_ind]=heap[root_i]
heap[root_i]=tmp
root_i=heap_ind
}
}
return(heap)
}
heap.sort<-function(heap)
{
sorted=NULL
len=length(heap)
while(len>0)
{
sorted=c(sorted,heap[1])
len=length(heap)
heap[1]=heap[len]
heap=heap[1:(len-1)]
heap=modify.heap(heap,root_i=1)
len=len-1
}
return(sorted)
}
vec=sample(1:100)
heap=heap.building(vec)
heap_sort=heap.sort(heap)
heapify <- function(array, n, i)
{
parent <- i
leftChild <- 2 * i + 1
rightChild <- 2 * i + 2
if ((leftChild < n) & (array[parent] < array[leftChild]))
{
parent = leftChild
}
if ((rightChild < n) & (array[parent] < array[rightChild]))
{
parent = rightChild
}
if (parent != i)
{
array = replace(array, c(i, parent), c(array[parent], array[i]))
heapify(array, n, parent)
}
}
heapSort <- function(array)
{
n <- length(array)
for (i in (n+1):1)
{
heapify(array, n, i)
}
for (i in n:1)
{
array = replace(array, c(i, 0), c(array[0], array[i]))
heapify(array, i, 1)
}
print(array)
}
vec=sample(1:100)
heap=heap.building(vec)
heap_sort=heap.sort(heap)
vec=sample(1:100)
heap_sort
vec=sample(1:100,10)
heap=heap.building(vec)
heap_sort=heap.sort(heap)
heap_sort
mergesort <- function(x)
{
merge_ <- function(left, right)
{
result <- c()
while(length(left) > 0 && length(right) > 0)
{
if(left[1] <= right[1])
{
result <- c(result, left[1])
left <- left[-1]
} else
{
result <- c(result, right[1])
right <- right[-1]
}
}.
if(length(left) > 0) result <- c(result, left)
if(length(right) > 0) result <- c(result, right)
result
}
len <- length(m)
if(len <= 1) m else
{
middle <- length(m) / 2
left <- m[1:floor(middle)]
right <- m[floor(middle+1):len]
left <- mergesort(left)
right <- mergesort(right).
if(left[length(left)] <= right[1])
{
c(left, right)
} else
{
merge_(left, right)
}
}
}
x <- c(32, 17, 49, 98, 06, 25, 53, 61)
mergesort(x)
mergesort <- function(m)
{
merge_ <- function(left, right)
{
result <- c()
while(length(left) > 0 && length(right) > 0)
{
if(left[1] <= right[1])
{
result <- c(result, left[1])
left <- left[-1]
} else
{
result <- c(result, right[1])
right <- right[-1]
}
}.
if(length(left) > 0) result <- c(result, left)
if(length(right) > 0) result <- c(result, right)
result
}
len <- length(m)
if(len <= 1) m else
{
middle <- length(m) / 2
left <- m[1:floor(middle)]
right <- m[floor(middle+1):len]
left <- mergesort(left)
right <- mergesort(right).
if(left[length(left)] <= right[1])
{
c(left, right)
} else
{
merge_(left, right)
}
}
}
m <- c(32, 17, 49, 98, 06, 25, 53, 61)
mergesort(m)
mergesort <- function(m)
{
merge_ <- function(left, right)
{
result <- c()
while(length(left) > 0 && length(right) > 0)
{
if(left[1] <= right[1])
{
result <- c(result, left[1])
left <- left[-1]
} else
{
result <- c(result, right[1])
right <- right[-1]
}
}.
if(length(left) > 0) result <- c(result, left)
if(length(right) > 0) result <- c(result, right)
result
}
len <- length(m)
if(len <= 1) m else
{
middle <- length(m) / 2
left <- m[1:floor(middle)]
right <- m[floor(middle+1):len]
left <- mergesort(left)
right <- mergesort(right).
if(left[length(left)] <= right[1])
{
c(left, right)
} else
{
merge_(left, right)
}
}
}
m <- c(32, 17, 49, 98, 06, 25, 53, 61)
mergesort(m)
mergesort <- function(m)
{
merge_ <- function(left, right)
{
result <- c()
while(length(left) > 0 && length(right) > 0)
{
if(left[1] <= right[1])
{
result <- c(result, left[1])
left <- left[-1]
} else
{
result <- c(result, right[1])
right <- right[-1]
}
}
if(length(left) > 0) result <- c(result, left)
if(length(right) > 0) result <- c(result, right)
result
}
len <- length(m)
if(len <= 1) m else
{
middle <- length(m) / 2
left <- m[1:floor(middle)]
right <- m[floor(middle+1):len]
left <- mergesort(left)
right <- mergesort(right).
if(left[length(left)] <= right[1])
{
c(left, right)
} else
{
merge_(left, right)
}
}
}
m <- c(32, 17, 49, 98, 06, 25, 53, 61)
mergesort(m)
mergesort <- function(m)
{
merge_ <- function(left, right)
{
result <- c()
while(length(left) > 0 && length(right) > 0)
{
if(left[1] <= right[1])
{
result <- c(result, left[1])
left <- left[-1]
} else
{
result <- c(result, right[1])
right <- right[-1]
}
}
if(length(left) > 0) result <- c(result, left)
if(length(right) > 0) result <- c(result, right)
result
}
len <- length(m)
if(len <= 1) m else
{
middle <- length(m) / 2
left <- m[1:floor(middle)]
right <- m[floor(middle+1):len]
left <- mergesort(left)
right <- mergesort(right).
if(left[length(left)] <= right[1])
{
c(left, right)
} else
{
merge_(left, right)
}
}
}
m <- c(1,3,5, 2,4,6), 1, 3, 6)
mergesort(m)
mergesort <- function(m)
{
merge_ <- function(left, right)
{
result <- c()
while(length(left) > 0 && length(right) > 0)
{
if(left[1] <= right[1])
{
result <- c(result, left[1])
left <- left[-1]
} else
{
result <- c(result, right[1])
right <- right[-1]
}
}
if(length(left) > 0) result <- c(result, left)
if(length(right) > 0) result <- c(result, right)
result
}
len <- length(m)
if(len <= 1) m else
{
middle <- length(m) / 2
left <- m[1:floor(middle)]
right <- m[floor(middle+1):len]
left <- mergesort(left)
right <- mergesort(right).
if(left[length(left)] <= right[1])
{
c(left, right)
} else
{
merge_(left, right)
}
}
}
m <- c(1,3,5, 2,4,6), 1, 3, 6)
mergesort(m)
Merge <- function(a, p, q, r){
n1 <- q - p + 1
n2 <- r - q
L <- numeric(n1+1)
R <- numeric(n2+1)
for(i in 1:n1){
L[i] <- a[p+i-1]
}
for(j in 1:n2){
R[j] <- a[q+j]
}
L[n1+1] <- Inf
R[n2+1] <- Inf
i=1
j=1
for(k in p:r){
if(L[i] <= R[j]){
a[k] <- L[i]
i <- i +1
}else{
a[k] <- R[j]
j <- j+1
}
}
a
}
Merge(c(1,3,5, 2,4,6), 1, 3, 6)
Merge(c(1,3,5, 2,4,6)
Merge(c(1,3,5, 2,4,6)
Merge(c(1,3,5, 2,4,6), (5,7,875,43)
Merge(c(1,3,5, 2,4,6), (5,7,875,43))
Merge(c(1,3,5, 2,4,6), (5,7,875,43))
Merge(c(1,3,5, 2,4,6), 5,7,875,43)
Merge(c(1,3,5, 2,4,6), 5,7,875,43)
Merge(c(1,3,5, 2,4,6), 5,7,875,43)
Merge(c(1,3,5, 2,4,6), 5,7,875,43)
Merge(c(1,3,5, 2,4,6), 5,875,43)
Merge(c(1,3,5, 2,4,6), 5,875,43)
Merge(c(1,3,5, 2,4,6), 1, 3, 6)
Merge(c(1,8,5, 2,4,6), 1, 3, 6)
Merge(c(1,9,5, 2,4,6), 1, 3, 6)
Merge(c(1,3,9, 2,4,6), 1, 3, 6)
quick_sort<-function(x)
{
if(length(x)<=1) return(x)
pivot<-x[1]
rest<-x[-1]
pivot_less<-quick_sort(rest[rest<pivot])
pivot_greater<-quick_sort(rest[rest>=pivot])
return(c(pivot_less,pivot,pivot_greater))
}
x <- c(32, 17, 49, 98, 06, 25, 53, 61)
quick_sort(x)
setwd("D:/R/7.5.2021")
#6.3 Function
#6.3.1. Zeros and NAs
setwd("D:/R/7.5.2021")
Veg <- read.table(file="Vegetation2.txt", header = TRUE)
names(Veg)
#Hàm kiểm tra xem trong cột có bao nhiêu biến chứa NA
NAPerVariable <- function(X1){
D1 <- is.na(X1)
colSums(D1)
}
NAPerVariable(Veg)
CP <- read.table(file="CodParasite.txt", header = TRUE)
NAPerVariable(CP)
#Hàm kiểm tra biến zero (0)
ZeroPerVariable <- function(X1){
D1= (X1==0)
colSums(D1)
}
ZeroPerVariable(Veg)
ZeroPerVariable(CP)
ZeroPerVariable <- function(X1){
D1= (X1==0)
colSums(D1, na.rm = TRUE)
}
ZeroPerVariable(Veg)
ZeroPerVariable(CP)
#6.3.2 Hàm có nhiều tham số
VariableInfo <-function(X1, Choice1){
if (Choice1== "Zeros") {
D1= (X1==0)
}
if (Choice1== "NAs") {
D1 <- is.na(X1)
}
colSums(D1, na.rm=TRUE)
}
VariableInfo(CP,"Zeros")
VariableInfo(CP,"NAs")
VariableInfo(CP,"thamso")
VariableInfo(CP)
#6.3.3
#Gán giá trị mặc định cho Choice1
VariableInfo <-function(X1, Choice1="Zeros"){
if (Choice1== "Zeros") {
D1= (X1==0)
}
if (Choice1== "NAs") {
D1 <- is.na(X1)
}
colSums(D1, na.rm=TRUE)
}
VariableInfo(CP,"Zeros")
VariableInfo(CP,"NAs")
VariableInfo(CP,"thamso")
VariableInfo(CP)
#Tham số không giống với giá trị của chúng ta
#Đưa ra 1 thông báo
VariableInfo <-function(X1, Choice1="Zeros"){
if (Choice1== "Zeros") {
D1= (X1==0)
}
if (Choice1== "NAs") {
D1 <- is.na(X1)
}
if (Choice1!= "Zeros" & Choice1 != "NAs") {
print("You make a miss typo.You should choose: Zeros or NAs")
}else{
colSums(D1, na.rm=TRUE)
}
}
VariableInfo(CP,"Zeros")
VariableInfo(CP,"NAs")
VariableInfo(CP,"thamso")
VariableInfo(CP)
setwd("D:/R/7.5.2021")
Veg <- read.table(file="Vegetation2.txt", header = TRUE)
names(Veg)
#Hàm kiểm tra xem trong cột có bao nhiêu biến chứa NA
NAPerVariable <- function(X1){
D1 <- is.na(X1)
colSums(D1)
}
NAPerVariable(Veg)
CP <- read.table(file="CodParasite.txt", header = TRUE)
NAPerVariable(CP)
#Hàm kiểm tra biến zero (0)
ZeroPerVariable <- function(X1){
D1= (X1==0)
colSums(D1)
}
ZeroPerVariable(Veg)
ZeroPerVariable(CP)
ZeroPerVariable <- function(X1){
D1= (X1==0)
colSums(D1, na.rm = TRUE)
}
ZeroPerVariable(Veg)
ZeroPerVariable(CP)
#6.3.2 Hàm có nhiều tham số
VariableInfo <-function(X1, Choice1){
if (Choice1== "Zeros") {
D1= (X1==0)
}
if (Choice1== "NAs") {
D1 <- is.na(X1)
}
colSums(D1, na.rm=TRUE)
}
VariableInfo(CP,"Zeros")
VariableInfo(CP,"NAs")
VariableInfo(CP,"thamso")
VariableInfo(CP)
#6.3.3
#Gán giá trị mặc định cho Choice1
VariableInfo <-function(X1, Choice1="Zeros"){
if (Choice1== "Zeros") {
D1= (X1==0)
}
if (Choice1== "NAs") {
D1 <- is.na(X1)
}
colSums(D1, na.rm=TRUE)
}
VariableInfo(CP,"Zeros")
VariableInfo(CP,"NAs")
VariableInfo(CP,"thamso")
VariableInfo(CP)
#Tham số không giống với giá trị của chúng ta
#Đưa ra 1 thông báo
VariableInfo <-function(X1, Choice1="Zeros"){
if (Choice1== "Zeros") {
D1= (X1==0)
}
if (Choice1== "NAs") {
D1 <- is.na(X1)
}
if (Choice1!= "Zeros" & Choice1 != "NAs") {
print("You make a miss typo.You should choose: Zeros or NAs")
}else{
colSums(D1, na.rm=TRUE)
}
}
VariableInfo(CP,"Zeros")
VariableInfo(CP,"NAs")
VariableInfo(CP,"thamso")
VariableInfo(CP)
q()
